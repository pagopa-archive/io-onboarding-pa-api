openapi: "3.0.0"
info:
  title: "IO onboarding PA API"
  x-summary: >-
    Public Administriations onboarding APIs for the IO project.
  description: |-
      The backend used by the onboarding portal for public administrations of the IO project.

      The website for the project is [io-website].
      Privacy Policy is [privacy].

      Development happens on github.


      [//]:  # (Riferimenti e url)
      [io-website]: https://io.italia.it
      [tos]: https://io.italia.it/note-legali/
      [privacy]: https://io.italia.it/privacy-policy/

  version: "0.0.1"
  x-project: io
  x-api-id: 49b844f5-2b1a-47a9-880a-ca480dac3736
  contact:
    url: https://io.italia.it
    email: teamdigitale@governo.it
  termsOfService: https://io.italia.it/note-legali/
externalDocs:
  url: https://io.italia.it
  description: IO Project website
servers:
  - url: https://api.pa-onboarding.dev.io.italia.it/
    description: Development environment
  - url: https://api.pa-onboarding.io.italia.it/
    description: Production environment
x-commons:
  # This section contains yaml anchors useful to implement common behaviors
  #  in the OAS.
  common-responses: &common-responses
    400:
      $ref: https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/400BadRequest
    429:
      $ref: https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/429TooManyRequests
    503:
      $ref: https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/503ServiceUnavailable
    default:
      $ref: https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/default
paths:
  /login:
    get:
      parameters:
        - name: entityID
          in: query
          required: true
          description: |-
            **IdP ID**. *Example: `posteid`*.
            The id of the SPID IdP to perform the login through.
            *Note: Also a fake IdP is available, whose id is `xx_testenv2`*."
          schema:
            type: string
            enum: ["lepidaid", "infocertid", "sielteid", "namirialid", "timid", "arubaid", "posteid", "intesaid", "spiditalia", "xx_testenv2"]
        - name: authLevel
          in: query
          required: true
          description: "**SPID level**. *Example: `SpidL2`*. The security level of SPID authentication."
          schema:
            type: string
            enum: ["SpidL1", "SpidL2", "SpidL3"]
      responses:
        302:
          description: Redirection to the login page from the choosen IdP.
  /logout:
    post:
      security:
        - bearerAuth: []
      responses:
        <<: *common-responses
        200:
          description: Successful response
  /profile:
    get:
      security:
        - bearerAuth: []
      responses:
        <<: *common-responses
        200:
          description: The user profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
    post:
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workEmail:
                  $ref: "#/components/schemas/EmailAddress"
              required:
                - workEmail
      responses:
        <<: *common-responses
        200:
          description: The updated user profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
  /public-administrations:
    get:
      parameters:
        - name: search
          in: query
          required: true
          description: |
            **Public administration name**.
            The API responds with a list of results that match the searching words.
          schema:
            type: string
            example: comune gioiosa
      responses:
        <<: *common-responses
        200:
          description: |-
            The public administrations whose names match the searching words
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchedOrganization'
components:
  schemas:
    EmailAddress:
      type: string
      format: email
    FiscalCode:
      type: string
      description: User's fiscal code.
      format: FiscalCode
      x-import: italia-ts-commons/lib/strings
      example: SPNDNL80R13C555X
    UserRole:
      type: string
      enum:
        - "ORG_DELEGATE"
        - "ORG_MANAGER"
        - "DEVELOPER"
        - "ADMIN"
    UserProfile:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
        familyName:
          type: string
        firstName:
          type: string
        fiscalCode:
          allOf:
            - $ref: "#/components/schemas/FiscalCode"
            - nullable: true
        role:
          $ref: "#/components/schemas/UserRole"
        workEmail:
          allOf:
            - $ref: "#/components/schemas/EmailAddress"
            - nullable: true
      required:
        - email
        - familyName
        - firstName
        - fiscalCode
        - role
        - workEmail
      example:
        {
          email: "example@email.com",
          familyName: "Rossi",
          firstName: "Mario",
          fiscalCode: "RSSMRA80A01H501U",
          role: "ORG_DELEGATE",
          workEmail: "work-email@email.com"
        }
    Links:
      externalDocs:
        url: https://tools.ietf.org/id/draft-handrews-json-schema-hyperschema-02.html
        description: HyperSchema internet draft.
      description: |-
        As this API wants to drive the consumer in the workflow, we decided to
        use Link Descriptor Objects defined in the current json-schema draft.

        [IANA link relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)
        should be used in `rel`.
      type: array
      items:
        $ref: https://json-schema.org/draft/2019-09/links
      example:
        - rel: self
          href: https://api.pa-onboarding.dev.io.italia.it/public-administrations/c_e956
          description: Agency URL

    SearchedOrganization:
      type: object
      properties:
        fiscalCode:
          type: string
        ipaCode:
          type: string
        name:
          type: string
        legalRepresentative:
          type: object
          properties:
            familyName:
              type: string
            firstName:
              type: string
            fiscalCode:
              nullable: true
              default: null
            phoneNumber:
              nullable: true
              default: null
          required:
            - familyName
            - firstName
            - fiscalCode
            - phoneNumber
        links:
          $ref: '#/components/schemas/Links'
        pecs:
          type: array
          items:
            type: string
          minLength: 1
          maxLength: 5
        scope:
          type: string
          enum: ["LOCAL", "NATIONAL"]
          nullable: true
        selectedPecIndex:
          type: integer
          minimum: -1
          maximum: 4
          nullable: true
      required:
        - fiscalCode
        - ipaCode
        - name
        - legalRepresentative
        - link
        - pecs
        - scope
        - selectedPecIndex
      example:
        [
        {
          "fiscalCode": "86000470830",
          "ipaCode": "c_e043",
          "legalRepresentative": {
            "familyName": "Spano'",
            "firstName": "Ignazio Alfonso",
            "fiscalCode": null,
            "phoneNumber": null
          },
          "name": "Comune di Gioiosa Marea",
          "pecs": [
            "indirizzo00@email.pec.it",
            "indirizzo01@email.pec.it"
          ],
          "scope": null,
          "selectedPecIndex": null,
          "links": [{
            "rel": "self",
            "href": "https://api.pa-onboarding.dev.io.italia.it/public-administrations/c_e043"
          }]
        },
        {
          "fiscalCode": "81000930800",
          "ipaCode": "c_e044",
          "legalRepresentative": {
            "familyName": "ALI'",
            "firstName": "Gianfranco",
            "fiscalCode": null,
            "phoneNumber": null
          },
          "name": "Comune di Gioiosa Jonica",
          "pecs": [
            "indirizzo10@email.pec.it",
            "indirizzo11@email.pec.it",
            "indirizzo12@email.pec.it",
            "indirizzo13@email.pec.it",
          ],
          "scope": null,
          "selectedPecIndex": null,
          "links": [{
            "rel": "self",
            "href": "https://api.pa-onboarding.dev.io.italia.it/public-administrations/c_e044"
          }]
        },
        {
          "fiscalCode": "00282520808",
          "ipaCode": "c_e956",
          "legalRepresentative": {
            "familyName": "Sergio",
            "firstName": "Mazzia",
            "fiscalCode": null,
            "phoneNumber": null
          },
          "name": "Comune di Marina di Gioiosa Ionica",
          "pecs": [
            "indirizzo20@email.pec.it",
            "indirizzo21@email.pec.it",
          ],
          "scope": null,
          "selectedPecIndex": null,
          "links": [{
            "rel": "self",
            "href": "https://api.pa-onboarding.dev.io.italia.it/public-administrations/c_e0956"
          }]
        }
        ]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
