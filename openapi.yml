swagger: "2.0"
info:
  title: "IO onboarding PA API"
  x-summary: >-
    Public Administriations onboarding APIs for the IO project.
  description: |-
    The backend used by the onboarding portal for public administrations of the IO project.

    The website for the project is [io-website].
    Privacy Policy is [privacy].

    Development happens on github.


    [//]:  # (Riferimenti e url)
    [io-website]: https://io.italia.it
    [tos]: https://io.italia.it/note-legali/
    [privacy]: https://io.italia.it/privacy-policy/

  version: "0.0.1"
  x-project: io
  x-api-id: 49b844f5-2b1a-47a9-880a-ca480dac3736
  contact:
    url: https://io.italia.it
    email: teamdigitale@governo.it
  termsOfService: https://io.italia.it/note-legali/
externalDocs:
  url: https://io.italia.it
  description: IO Project website
host: api.pa-onboarding.io.italia.it
basePath: /
schemes:
  - https
x-commons:
  # This section contains yaml anchors useful to implement common behaviors
  #  in the OAS.
  non-empty-string: &non-empty-string
    type: string
    minLength: 1
paths:
  /login:
    get:
      description: Redirects the user to the login page of the chosen SPID IdP.
      operationId: login
      parameters:
        - name: entity_id
          in: query
          required: true
          description: |-
            **IdP ID**.
            The id of the SPID IdP to perform the login through.
            *Note: Also a fake IdP with id `xx_tedsstenv2` is available.*
          type: string
          x-extensible-enum: ["lepidaid", "infocertid", "sielteid", "namirialid", "timid", "arubaid", "posteid", "intesaid", "spiditalia", "xx_testenv2"]
          x-example: posteid
        - name: auth_level
          in: query
          required: true
          description: "**SPID level**. The security level of SPID authentication."
          type: string
          x-extensible-enum: ["SpidL2", "SpidL3"]
          x-example: SpidL2
      responses:
        302:
          description: Redirection to the login page from the chosen IdP.
  /logout:
    post:
      description: Logs the user out
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response
  /organizations:
    post:
      description: |-
        Creates a new organization associated with its legal responsible,
        the user calling this endpoint is also associated to the organization as its delegate.
      operationId: registerOrganization
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/OrganizationRegistrationParams"
      responses:
        201:
          description: The registered organization
          headers:
            Location:
              description: URI of the created organization
              type: string
          schema:
            $ref: "#/definitions/Organization"
        400:
          $ref: "#/responses/400"
  /profile:
    get:
      description: |-
        Returns the user profile information.
      operationId: getProfile
      security:
        - bearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: The user profile information
          schema:
            $ref: "#/definitions/UserProfile"
    put:
      description: |-
        Updates the user profile.
      operationId: updateProfile
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              work_email:
                $ref: "#/definitions/EmailAddress"
            required:
              - work_email
      responses:
        200:
          description: The updated user profile information
          schema:
            $ref: "#/definitions/UserProfile"
        400:
          $ref: "#/responses/400"
  /public-administrations:
    get:
      description: |-
        Returns a list of public administrations that match the searching words.
      operationId: searchPublicAdministration
      produces:
        - application/json
      parameters:
        - name: search
          in: query
          required: true
          description: |
            **Public administration name**.
            The API responds with a list of results that match the searching words.
          pattern: ^[0-9A-Za-z ]{3,}$
          type: string
      responses:
        200:
          description: |-
            Public Administrations matching the search criteria.
          schema:
            $ref: '#/definitions/AdministrationSearchResult'
        400:
          $ref: '#/responses/400'
responses:
  400:
    description: Bad request
    schema:
      $ref: "#/definitions/ProblemJson"
definitions:
  EmailAddress:
    type: string
    format: email
  FiscalCode:
    type: string
    description: |-
      User's fiscal code.
      Its format is defined by the [`FiscalCode`](https://teamdigitale.github.io/io-ts-commons/modules/_strings_.html#fiscalcode)
      constant in [italia-ts-commons](https://teamdigitale.github.io/io-ts-commons) library.

      *NOTE: for historical reasons the labels using this schema are not aligned
      with the nomenclature defined by the [national ontologies](https://w3id.org/italia).
      They will be replaced with the correct label
      of [`tax_code`](https://ontopia-lodview.prod.pdnd.italia.it/onto/CPV/taxCode) at some point in time.*
    format: FiscalCode
    x-import: italia-ts-commons/lib/strings
    example: SPNDNL80R13C555X
  OrganizationFiscalCode:
    type: string
    description: |-
      Organization's fiscal code.
      Its format is defined by the [`OrganizationFiscalCode`](https://teamdigitale.github.io/io-ts-commons/modules/_strings_.html#organizationfiscalcode)
      constant in [italia-ts-commons](https://teamdigitale.github.io/io-ts-commons) library.

      *NOTE: for historical reasons the labels using this schema are not aligned
      with the nomenclature defined by the [national ontologies](https://w3id.org/italia).
      They will be replaced with the correct label
      of [`tax_code`](https://ontopia-lodview.prod.pdnd.italia.it/onto/COV/taxCode) at some point in time.*
    format: OrganizationFiscalCode
    x-import: italia-ts-commons/lib/strings
    example: 01234567890
  OrganizationScope:
    type: string
    x-extensible-enum:
      - "LOCAL"
      - "NATIONAL"
  UserRole:
    type: string
    x-extensible-enum:
      - "ORG_DELEGATE"
      - "ORG_MANAGER"
      - "DEVELOPER"
      - "ADMIN"
  LegalRepresentative:
    type: object
    properties:
      email:
        $ref: "#/definitions/EmailAddress"
      family_name:
        <<: *non-empty-string
      fiscal_code:
        $ref: "#/definitions/FiscalCode"
      given_name:
        <<: *non-empty-string
      phone_number:
        <<: *non-empty-string
      role:
        $ref: "#/definitions/UserRole"
    required:
      - email
      - family_name
      - fiscal_code
      - given_name
      - phone_number
      - role
    example:
      {
        "family_name": "Spano'",
        "fiscal_code": "BCDFGH12A21Z123D",
        "given_name": "Ignazio Alfonso",
        "phone_number": "5550000000",
        "email": "indirizzo00@email.pec.it",
        "role": "ORG_MANAGER"
      }
  UserProfile:
    type: object
    properties:
      email:
        $ref: "#/definitions/EmailAddress"
      family_name:
        type: string
      fiscal_code:
        $ref: "#/definitions/FiscalCode"
      given_name:
        type: string
      role:
        $ref: "#/definitions/UserRole"
      work_email:
        $ref: "#/definitions/EmailAddress"
    required:
      - email
      - family_name
      - given_name
      - fiscal_code
      - role
    example:
      {
        email: "example@email.com",
        family_name: "Rossi",
        fiscal_code: "RSSMRA80A01H501U",
        given_name: "Mario",
        role: "ORG_DELEGATE",
        work_email: "work-email@email.com"
      }
  Link:
    externalDocs:
      url: https://tools.ietf.org/id/draft-handrews-json-schema-hyperschema-02.html
      description: HyperSchema internet draft.
    description: |-
      As this API wants to drive the consumer in the workflow, we decided to
      use Link Descriptor Objects defined in the current [json-schema draft](https://json-schema.org/draft/2019-09/links).

      [IANA link relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)
      should be used in `rel`.
    type: object
    properties:
      rel:
        type: string
      href:
        type: string
        format: uri-template
      title:
        type: string
      description:
        type: string
      $comment:
        type: string
    required:
      - rel
      - href
  Links:
    type: array
    items:
      $ref: '#/definitions/Link'
    example:
      - rel: self
        href: https://api.pa-onboarding.io.italia.it/public-administrations/c_e956
        description: Agency URL
  AdministrationSearchParam:
    type: string
    pattern: ^[0-9A-Za-z ]{3,}$
    example: comune gioiosa
  AdministrationSearchResult:
    type: object
    properties:
      administrations:
        type: array
        items:
          $ref: '#/definitions/FoundAdministration'
    required:
      - administrations
  FoundAdministration:
    x-one-of: true
    allOf:
      - $ref: '#/definitions/FoundNotRegisteredAdministration'
      - $ref: '#/definitions/FoundRegisteredAdministration'
  FoundNotRegisteredAdministration:
    type: object
    properties:
      fiscal_code:
        $ref: "#/definitions/OrganizationFiscalCode"
      ipa_code:
        type: string
      name:
        type: string
      legal_representative:
        type: object
        properties:
          family_name:
            type: string
          given_name:
            type: string
        required:
          - family_name
          - given_name
      links:
        $ref: '#/definitions/Links'
      pecs:
        type: object
        additionalProperties:
          $ref: '#/definitions/EmailAddress'
    required:
      - fiscal_code
      - ipa_code
      - name
      - legal_representative
      - links
      - pecs
    example:
      [
      {
        "fiscal_code": "86000470830",
        "ipa_code": "c_e043",
        "legal_representative": {
          "family_name": "Spano'",
          "given_name": "Ignazio Alfonso"
        },
        "name": "Comune di Gioiosa Marea",
        "pecs": {
          "1": "indirizzo00@email.pec.it",
          "2": "indirizzo01@email.pec.it"
        },
        "links": [{
          "rel": "self",
          "href": "https://api.pa-onboarding.io.italia.it/public-administrations/c_e043"
        }]
      },
      {
        "fiscal_code": "81000930800",
        "ipa_code": "c_e044",
        "legal_representative": {
          "family_name": "ALI'",
          "given_name": "Gianfranco"
        },
        "name": "Comune di Gioiosa Jonica",
        "pecs": {
          "1": "indirizzo10@email.pec.it",
          "2": "indirizzo11@email.pec.it",
          "3": "indirizzo12@email.pec.it",
          "4": "indirizzo13@email.pec.it",
        },
        "links": [{
          "rel": "self",
          "href": "https://api.pa-onboarding.io.italia.it/public-administrations/c_e044"
        }]
      },
      {
        "fiscal_code": "00282520808",
        "ipa_code": "c_e956",
        "legal_representative": {
          "family_name": "Sergio",
          "given_name": "Mazzia"
        },
        "name": "Comune di Marina di Gioiosa Ionica",
        "pecs": {
          "1": "indirizzo20@email.pec.it",
          "2": "indirizzo21@email.pec.it",
        },
        "links": [{
          "rel": "self",
          "href": "https://api.pa-onboarding.io.italia.it/public-administrations/c_e0956"
        }]
      }
      ]
  FoundRegisteredAdministration:
    type: object
    properties:
      fiscal_code:
        $ref: "#/definitions/OrganizationFiscalCode"
      ipa_code:
        type: string
      name:
        type: string
      legal_representative:
        type: object
        properties:
          family_name:
            type: string
          fiscal_code:
            $ref: "#/definitions/FiscalCode"
          given_name:
            type: string
          phone_number:
            type: string
        required:
          - family_name
          - fiscal_code
          - given_name
          - phone_number
      links:
        $ref: '#/definitions/Links'
      pecs:
        type: object
        additionalProperties:
          $ref: '#/definitions/EmailAddress'
      scope:
        $ref: '#/definitions/OrganizationScope'
      selected_pec_label:
        type: string
    required:
      - fiscal_code
      - ipa_code
      - name
      - legal_representative
      - links
      - pecs
      - scope
      - selected_pec_label
    example:
      [
      {
        "fiscal_code": "86000470830",
        "ipa_code": "c_e043",
        "legal_representative": {
          "family_name": "Spano'",
          "given_name": "Ignazio Alfonso",
          "fiscal_code": "BCDFGH12A21Z123D",
          "phone_number": "3331111111"
        },
        "name": "Comune di Gioiosa Marea",
        "pecs": {
          "1": "indirizzo00@email.pec.it",
          "2": "indirizzo01@email.pec.it"
        },
        "scope": "NATIONAL",
        "selected_pec_label": "2",
        "links": [{
                    "rel": "self",
                    "href": "https://api.pa-onboarding.io.italia.it/public-administrations/c_e043"
                  }]
      },
      {
        "fiscal_code": "81000930800",
        "ipa_code": "c_e044",
        "legal_representative": {
          "family_name": "ALI'",
          "given_name": "Gianfranco",
          "fiscal_code": "BCDFGH12A21Z123F",
          "phone_number": "3332222222"
        },
        "name": "Comune di Gioiosa Jonica",
        "pecs": {
          "1": "indirizzo10@email.pec.it",
          "2": "indirizzo11@email.pec.it",
          "3": "indirizzo12@email.pec.it",
          "4": "indirizzo13@email.pec.it",
        },
        "scope": "LOCAL",
        "selected_pec_label": "3",
        "links": [{
                    "rel": "self",
                    "href": "https://api.pa-onboarding.io.italia.it/public-administrations/c_e044"
                  }]
      },
      {
        "fiscal_code": "00282520808",
        "ipa_code": "c_e956",
        "legal_representative": {
          "family_name": "Sergio",
          "given_name": "Mazzia",
          "fiscal_code": "BCDFGH12A21Z123E",
          "phone_number": "3333333333"
        },
        "name": "Comune di Marina di Gioiosa Ionica",
        "pecs": {
          "1": "indirizzo20@email.pec.it",
          "2": "indirizzo21@email.pec.it",
        },
        "scope": "LOCAL",
        "selected_pec_label": "1",
        "links": [{
          "rel": "self",
          "href": "https://api.pa-onboarding.io.italia.it/public-administrations/c_e0956"
        }]
      }
      ]
  Organization:
    type: object
    properties:
      fiscal_code:
        $ref: "#/definitions/OrganizationFiscalCode"
      ipa_code:
        <<: *non-empty-string
      legal_representative:
        $ref: "#/definitions/LegalRepresentative"
      links:
        $ref: "#/definitions/Links"
      name:
        <<: *non-empty-string
      pec:
        $ref: "#/definitions/EmailAddress"
      scope:
        $ref: '#/definitions/OrganizationScope'
    required:
      - fiscal_code
      - ipa_code
      - links
      - name
      - pec
      - scope
    example:
      {
        "fiscal_code": "86000470830",
        "ipa_code": "c_e043",
        "legal_representative": {
          "family_name": "Spano'",
          "given_name": "Ignazio Alfonso",
          "fiscal_code": "BCDFGH12A21Z123D",
          "phone_number": "5550000000",
          "email": "indirizzo00@email.pec.it",
          "role": "ORG_MANAGER"
        },
        "name": "Comune di Gioiosa Marea",
        "pec": "indirizzo00@email.pec.it",
        "scope": "NATIONAL"
      }
  OrganizationRegistrationParams:
    type: object
    properties:
      ipa_code:
        <<: *non-empty-string
      legal_representative:
        type: object
        properties:
          family_name:
            <<: *non-empty-string
          given_name:
            <<: *non-empty-string
          fiscal_code:
            $ref: "#/definitions/FiscalCode"
          phone_number:
            <<: *non-empty-string
        required:
          - family_name
          - given_name
          - fiscal_code
          - phone_number
      scope:
        $ref: '#/definitions/OrganizationScope'
      selected_pec_label:
        <<: *non-empty-string
    required:
      - ipa_code
      - legal_representative
      - scope
      - selected_pec_label
    example:
      {
        "ipa_code": "c_e043",
        "legal_representative": {
          "family_name": "Spano'",
          "given_name": "Ignazio Alfonso",
          "fiscal_code": "BCDFGH12A21Z123D",
          "phone_number": "3331111111"
        },
        "scope": "NATIONAL",
        "selected_pec_label": "1"
      }
  ProblemJson:
    $ref: "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/v0.5.0/openapi/definitions.yaml#/ProblemJson"
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
